seed: 7.000000
n_iter: 30
scoring: roc_auc
-- SVM MODEL --
Number of experiments: 10
Best: 0.933333 using {'SVM__C': 50, 'SVM__gamma': 0.01, 'SVM__kernel': 'rbf'}
Best: 0.983333 using {'SVM__C': 50, 'SVM__gamma': 0.05, 'SVM__kernel': 'rbf'}
Best: 0.875000 using {'SVM__C': 200, 'SVM__gamma': 0.001, 'SVM__kernel': 'rbf'}
Best: 1.000000 using {'SVM__C': 200, 'SVM__gamma': 0.01, 'SVM__kernel': 'rbf'}
Best: 0.916667 using {'SVM__C': 400, 'SVM__gamma': 0.01, 'SVM__kernel': 'rbf'}
Best: 0.916667 using {'SVM__C': 200, 'SVM__gamma': 0.01, 'SVM__kernel': 'rbf'}
Best: 0.883333 using {'SVM__C': 400, 'SVM__gamma': 0.01, 'SVM__kernel': 'rbf'}
Best: 0.925000 using {'SVM__C': 400, 'SVM__gamma': 0.01, 'SVM__kernel': 'rbf'}
Best: 0.883333 using {'SVM__C': 200, 'SVM__gamma': 0.01, 'SVM__kernel': 'rbf'}
Best: 0.883333 using {'SVM__C': 50, 'SVM__gamma': 0.05, 'SVM__kernel': 'rbf'}
AUC = 0.8382608695652174
-- KNN MODEL --
Number of experiments: 10
Best: 0.850000 using {'KNN__n_neighbors': 5, 'KNN__weights': 'distance'}
Best: 0.933333 using {'KNN__n_neighbors': 7, 'KNN__weights': 'distance'}
Best: 0.866667 using {'KNN__n_neighbors': 9, 'KNN__weights': 'distance'}
Best: 0.966667 using {'KNN__n_neighbors': 13, 'KNN__weights': 'distance'}
Best: 0.866667 using {'KNN__n_neighbors': 13, 'KNN__weights': 'distance'}
Best: 0.850000 using {'KNN__n_neighbors': 11, 'KNN__weights': 'distance'}
Best: 0.816667 using {'KNN__n_neighbors': 13, 'KNN__weights': 'distance'}
Best: 0.866667 using {'KNN__n_neighbors': 11, 'KNN__weights': 'distance'}
Best: 0.833333 using {'KNN__n_neighbors': 11, 'KNN__weights': 'distance'}
Best: 0.808333 using {'KNN__n_neighbors': 9, 'KNN__weights': 'distance'}
AUC = 0.7843478260869565
-- RF MODEL --
Number of experiments: 10
Best: 0.900000 using {'RF__max_depth': 3, 'RF__n_estimators': 60}
Best: 0.958333 using {'RF__max_depth': 2, 'RF__n_estimators': 400}
Best: 0.837500 using {'RF__max_depth': 1, 'RF__n_estimators': 10}
Best: 0.962500 using {'RF__max_depth': 4, 'RF__n_estimators': 60}
Best: 0.900000 using {'RF__max_depth': 4, 'RF__n_estimators': 60}
Best: 0.908333 using {'RF__max_depth': 2, 'RF__n_estimators': 400}
Best: 0.875000 using {'RF__max_depth': 4, 'RF__n_estimators': 60}
Best: 0.875000 using {'RF__max_depth': 3, 'RF__n_estimators': 100}
Best: 0.891667 using {'RF__max_depth': 3, 'RF__n_estimators': 60}
Best: 0.866667 using {'RF__max_depth': 3, 'RF__n_estimators': 200}
AUC = 0.8478260869565217
-- ADAB MODEL --
Number of experiments: 10
Best: 0.950000 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 400}
Best: 1.000000 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 30}
Best: 0.916667 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 60}
Best: 0.983333 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 400}
Best: 0.933333 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 60}
Best: 0.975000 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 400}
Best: 0.958333 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 100}
Best: 0.908333 using {'ADAB__base_estimator__max_depth': 2, 'ADAB__n_estimators': 100}
Best: 0.900000 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 30}
Best: 0.916667 using {'ADAB__base_estimator__max_depth': 1, 'ADAB__n_estimators': 60}
AUC = 0.8869565217391304
-- LGB MODEL --
Number of experiments: 10
Best: 0.500000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.500000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.500000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.500000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.500000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.562500 using {'LGB__max_depth': 1, 'LGB__n_estimators': 30}
Best: 0.525000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.575000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.575000 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
Best: 0.587500 using {'LGB__max_depth': 1, 'LGB__n_estimators': 10}
AUC = 0.8043478260869565
-- XGB MODEL --
Number of experiments: 10
Best: 0.925000 using {'XGB__max_depth': 1, 'XGB__n_estimators': 30}
Best: 0.975000 using {'XGB__max_depth': 1, 'XGB__n_estimators': 10}
Best: 0.933333 using {'XGB__max_depth': 2, 'XGB__n_estimators': 60}
Best: 0.987500 using {'XGB__max_depth': 3, 'XGB__n_estimators': 60}
Best: 0.975000 using {'XGB__max_depth': 3, 'XGB__n_estimators': 30}
Best: 1.000000 using {'XGB__max_depth': 3, 'XGB__n_estimators': 30}
Best: 0.925000 using {'XGB__max_depth': 2, 'XGB__n_estimators': 100}
Best: 0.954167 using {'XGB__max_depth': 2, 'XGB__n_estimators': 30}
Best: 0.966667 using {'XGB__max_depth': 2, 'XGB__n_estimators': 60}
Best: 0.925000 using {'XGB__max_depth': 1, 'XGB__n_estimators': 100}
AUC = 0.942608695652174
-- DT MODEL --
Number of experiments: 10
Best: 0.850000 using {'DT__criterion': 'gini', 'DT__max_depth': 3, 'DT__splitter': 'best'}
The binary tree structure has 13 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.16218117624521255 else to node 8.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.45087486505508423 else to node 5.
		node=2 is a split node: go to node 3 if X[:, 12] <= -1.0761472582817078 else to node 4.
			node=3 is a leaf node.
			node=4 is a leaf node.
		node=5 is a split node: go to node 6 if X[:, 2] <= -0.001790553331375122 else to node 7.
			node=6 is a leaf node.
			node=7 is a leaf node.
	node=8 is a split node: go to node 9 if X[:, 1] <= 0.02331162430346012 else to node 10.
		node=9 is a leaf node.
		node=10 is a split node: go to node 11 if X[:, 1] <= 0.16361937671899796 else to node 12.
			node=11 is a leaf node.
			node=12 is a leaf node.
Best: 0.900000 using {'DT__criterion': 'entropy', 'DT__max_depth': 2, 'DT__splitter': 'best'}
The binary tree structure has 5 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.1471959613263607 else to node 4.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.5756314694881439 else to node 3.
		node=2 is a leaf node.
		node=3 is a leaf node.
	node=4 is a leaf node.
Best: 0.875000 using {'DT__criterion': 'gini', 'DT__max_depth': 4, 'DT__splitter': 'best'}
The binary tree structure has 13 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.15155315771698952 else to node 8.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.4172110855579376 else to node 5.
		node=2 is a split node: go to node 3 if X[:, 12] <= -1.0136837363243103 else to node 4.
			node=3 is a leaf node.
			node=4 is a leaf node.
		node=5 is a split node: go to node 6 if X[:, 2] <= -0.04330916702747345 else to node 7.
			node=6 is a leaf node.
			node=7 is a leaf node.
	node=8 is a split node: go to node 9 if X[:, 1] <= -0.02703644521534443 else to node 10.
		node=9 is a leaf node.
		node=10 is a split node: go to node 11 if X[:, 1] <= 0.11766570620238781 else to node 12.
			node=11 is a leaf node.
			node=12 is a leaf node.
Best: 0.937500 using {'DT__criterion': 'gini', 'DT__max_depth': 2, 'DT__splitter': 'best'}
The binary tree structure has 7 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.17784376442432404 else to node 4.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.3962632715702057 else to node 3.
		node=2 is a leaf node.
		node=3 is a leaf node.
	node=4 is a split node: go to node 5 if X[:, 7] <= 0.1970066800713539 else to node 6.
		node=5 is a leaf node.
		node=6 is a leaf node.
Best: 0.887500 using {'DT__criterion': 'gini', 'DT__max_depth': 2, 'DT__splitter': 'best'}
The binary tree structure has 7 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.09902403131127357 else to node 4.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.5311288833618164 else to node 3.
		node=2 is a leaf node.
		node=3 is a leaf node.
	node=4 is a split node: go to node 5 if X[:, 14] <= -0.5859860479831696 else to node 6.
		node=5 is a leaf node.
		node=6 is a leaf node.
Best: 0.900000 using {'DT__criterion': 'gini', 'DT__max_depth': 2, 'DT__splitter': 'best'}
The binary tree structure has 7 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.06667542736977339 else to node 4.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.5003584027290344 else to node 3.
		node=2 is a leaf node.
		node=3 is a leaf node.
	node=4 is a split node: go to node 5 if X[:, 7] <= 0.3319791257381439 else to node 6.
		node=5 is a leaf node.
		node=6 is a leaf node.
Best: 0.795833 using {'DT__criterion': 'gini', 'DT__max_depth': 3, 'DT__splitter': 'random'}
The binary tree structure has 13 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 13] <= -0.5708571046758152 else to node 6.
	node=1 is a split node: go to node 2 if X[:, 13] <= -1.2310687869362464 else to node 3.
		node=2 is a leaf node.
		node=3 is a split node: go to node 4 if X[:, 2] <= -1.2622795365610524 else to node 5.
			node=4 is a leaf node.
			node=5 is a leaf node.
	node=6 is a split node: go to node 7 if X[:, 9] <= -0.1671815702041045 else to node 10.
		node=7 is a split node: go to node 8 if X[:, 2] <= -0.3954614282958402 else to node 9.
			node=8 is a leaf node.
			node=9 is a leaf node.
		node=10 is a split node: go to node 11 if X[:, 7] <= 0.2801944182125067 else to node 12.
			node=11 is a leaf node.
			node=12 is a leaf node.
Best: 0.833333 using {'DT__criterion': 'gini', 'DT__max_depth': 4, 'DT__splitter': 'best'}
The binary tree structure has 13 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.16610855609178543 else to node 8.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.5107413679361343 else to node 5.
		node=2 is a split node: go to node 3 if X[:, 12] <= -1.026465356349945 else to node 4.
			node=3 is a leaf node.
			node=4 is a leaf node.
		node=5 is a split node: go to node 6 if X[:, 2] <= -0.2028006911277771 else to node 7.
			node=6 is a leaf node.
			node=7 is a leaf node.
	node=8 is a split node: go to node 9 if X[:, 7] <= 0.2730455994606018 else to node 12.
		node=9 is a split node: go to node 10 if X[:, 9] <= 0.23106126487255096 else to node 11.
			node=10 is a leaf node.
			node=11 is a leaf node.
		node=12 is a leaf node.
Best: 0.891667 using {'DT__criterion': 'gini', 'DT__max_depth': 3, 'DT__splitter': 'best'}
The binary tree structure has 13 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.15544239804148674 else to node 8.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.476634219288826 else to node 5.
		node=2 is a split node: go to node 3 if X[:, 12] <= -1.0763280987739563 else to node 4.
			node=3 is a leaf node.
			node=4 is a leaf node.
		node=5 is a split node: go to node 6 if X[:, 2] <= -0.029115036129951477 else to node 7.
			node=6 is a leaf node.
			node=7 is a leaf node.
	node=8 is a split node: go to node 9 if X[:, 1] <= -0.16685345396399498 else to node 10.
		node=9 is a leaf node.
		node=10 is a split node: go to node 11 if X[:, 1] <= 0.13028369471430779 else to node 12.
			node=11 is a leaf node.
			node=12 is a leaf node.
Best: 0.858333 using {'DT__criterion': 'gini', 'DT__max_depth': 3, 'DT__splitter': 'best'}
The binary tree structure has 13 nodes and has the following tree structure:

node=0 is a split node: go to node 1 if X[:, 9] <= -0.09480319917201996 else to node 8.
	node=1 is a split node: go to node 2 if X[:, 12] <= 0.5814818441867828 else to node 5.
		node=2 is a split node: go to node 3 if X[:, 12] <= -1.1287482976913452 else to node 4.
			node=3 is a leaf node.
			node=4 is a leaf node.
		node=5 is a split node: go to node 6 if X[:, 2] <= 0.04290151596069336 else to node 7.
			node=6 is a leaf node.
			node=7 is a leaf node.
	node=8 is a split node: go to node 9 if X[:, 1] <= -0.03723765816539526 else to node 10.
		node=9 is a leaf node.
		node=10 is a split node: go to node 11 if X[:, 1] <= 0.11833933088928461 else to node 12.
			node=11 is a leaf node.
			node=12 is a leaf node.
AUC = 0.8626086956521739
-- LOGISTIC REGRESSION MODEL --
Number of experiments: 10
Best: 0.925000 using {'LOGR__C': 5, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.53035384  0.4546507  -0.49901643 -1.11135517 -0.93743633 -0.91247166
   0.63853833  2.72130093 -1.80363615  1.6856199  -0.3021728   0.89227811
   0.92944188  1.20716879 -0.2872238  -0.25106375]]
Best: 0.916667 using {'LOGR__C': 0.001, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[ 0.01112469 -0.01021185  0.01040902  0.010843    0.00841801  0.01090504
  -0.01065529  0.01286687 -0.0090996   0.01095184  0.01062578  0.00848708
   0.01089479  0.01215842 -0.00400033 -0.00951119]]
Best: 0.891667 using {'LOGR__C': 10, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.80685791 -0.28195613 -1.07298078 -0.8809825  -0.58192018 -0.97186764
   2.44854629  3.20821994 -2.83977315  2.16878108 -0.04130971  0.92703272
   1.08086015  1.33826923 -0.82205606 -0.14431022]]
Best: 0.975000 using {'LOGR__C': 1, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.29693207  0.2293805  -0.28068827 -0.4046432  -0.31614396 -0.36004788
  -0.02245519  1.31999595 -0.64122992  0.80971562  0.07540759  0.23258682
   0.97819922  0.69743238  0.16837569 -0.36415633]]
Best: 0.883333 using {'LOGR__C': 3, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.59397246  0.08858951 -0.68019069 -0.79949934 -0.62372666 -0.65503283
   0.5873899   1.98070994 -1.2411299   1.44988816 -0.22878869  0.76712965
   0.88763463  1.14183567 -0.34886939 -0.19356541]]
Best: 0.933333 using {'LOGR__C': 10, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-1.35634151 -0.54802621 -1.90536676 -1.50528957 -1.19689393 -1.27577218
   1.59781045  2.96359078 -2.70410496  2.58430637 -0.10113585  1.90250168
   1.15577016  2.16533363 -0.99999396 -0.53216407]]
Best: 0.866667 using {'LOGR__C': 3, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.54149504  0.02097638 -0.65709663 -0.67809626 -0.56783461 -0.52510113
   0.48943372  2.11922795 -1.1870068   1.36261109 -0.0050139   0.61884029
   0.71313339  0.88383079 -0.23485889 -0.35839906]]
Best: 0.908333 using {'LOGR__C': 2, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.55635817  0.40927552 -0.53638853 -0.57982076 -0.53994897 -0.35185287
   0.26774957  1.97247384 -1.0499073   1.16050405  0.06070932  0.53279207
   0.71716895  0.8223412  -0.22717763 -0.16503904]]
Best: 0.875000 using {'LOGR__C': 2, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.54919922  0.30225356 -0.56615971 -0.5264619  -0.36136941 -0.58573308
   0.2788001   1.72966374 -0.87929977  1.07633533 -0.07987406  0.52045227
   0.85446961  0.88272074 -0.10449171 -0.49444194]]
Best: 0.833333 using {'LOGR__C': 3, 'LOGR__penalty': 'l2'}
Coefficient of the features in the decision function:  [[-0.6156561   0.21506039 -0.65934284 -0.75444818 -0.60522246 -0.58621629
   0.58077803  2.08655906 -1.35909185  1.41531051 -0.16064908  0.74496167
   0.82079405  1.11409187 -0.25695853 -0.32460602]]
AUC = 0.9026086956521739

 
Warning
Figures now render in the Plots pane by default. To make them also appear inline in the Console, uncheck "Mute Inline Plotting" under the Plots pane options menu.
               SensLevel0          SensLevel1  ...  SpeCI_lo  SpeCI_hi
SVM   0.4782608695652174   0.782608695652174  ...   0.69629   0.98371
KNN   0.5217391304347826  0.7391304347826086  ...    0.6432    0.9568
ADAB  0.7391304347826086  0.8695652173913043  ...   0.69629   0.98371
RF    0.8260869565217391  0.8260869565217391  ...  0.813653  1.026347
LGB   0.6413043478260869   0.782608695652174  ...    0.6432    0.9568
XGB   0.8695652173913043  0.9130434782608695  ...  0.752615  1.007385
DT    0.6159420289855071  0.8695652173913043  ...  0.752615  1.007385
LOGR  0.7391304347826086  0.9130434782608695  ...  0.592583  0.927417

[8 rows x 12 columns]
Elapsed time:  251.6964910030365